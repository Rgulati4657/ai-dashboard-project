

Phase,Week,Start Date,End Date,Focus / Theme,Task Description,Key Skill,Tools / Resources,"Project Goal for the Week",Status
"Phase 1: The Bedrock - Server & Backend Fundamentals","1","2025-07-14","2025-07-20","Linux Fundamentals","Task 1.1: Set up a Linux environment (use WSL on Windows, or a VM like VirtualBox). Task 1.2: Practice basic commands: `ls`, `cd`, `pwd`, `mkdir`, `rm`, `cp`, `mv`. Task 1.3: Learn about file permissions (`chmod`) and users (`sudo`). Task 1.4: Learn to use a terminal-based text editor like `nano`.","Linux CLI",WSL/VirtualBox,"Confidently navigate and manage files/directories in a Linux terminal.",Not Started
"Phase 1: The Bedrock - Server & Backend Fundamentals","2","2025-07-21","2025-07-27","Advanced Linux & Scripting","Task 2.1: Learn about package managers (`apt` on Debian/Ubuntu). Install Python, Git. Task 2.2: Understand input/output redirection (`>`, `|`, `>>`). Task 2.3: Write simple shell scripts to automate tasks (e.g., a script to create a new project directory and a virtual environment). Task 2.4: Learn to use `git` for version control (`init`, `add`, `commit`, `push`).","Shell Scripting & Git","Bash, Git, GitHub","Write a shell script to automate your development setup and push it to a new GitHub repo.",Not Started
"Phase 1: The Bedrock - Server & Backend Fundamentals","3","2025-07-28","2025-08-03","Intro to FastAPI","Task 3.1: Complete the official FastAPI tutorial (first few sections). Task 3.2: Understand path and query parameters. Task 3.3: Learn about Pydantic for data validation and creating schemas. Task 3.4: Build a simple ""To-Do"" API with in-memory data (a Python list of dicts) with endpoints for GET (all) and POST (new).","Python Backend Dev",FastAPI, Pydantic, VS Code,"Create a functioning To-Do API with endpoints to list all tasks and create a new one.",Not Started
"Phase 1: The Bedrock - Server & Backend Fundamentals","4","2025-08-04","2025-08-10","Database Integration with Supabase","Task 4.1: Create a Supabase account and a new project. Task 4.2: Design a `todos` table in the Supabase UI. Task 4.3: Modify your FastAPI app to connect to Supabase using its Python client library. Task 4.4: Implement full CRUD (Create, Read, Update, Delete) functionality for your To-Do API, interacting with the real database.","Database Management",Supabase,"Your API should now manage To-Do items in a persistent Supabase database.",Not Started
"Phase 2: Containerization & Deployment","5","2025-08-11","2025-08-17","Docker Fundamentals","Task 5.1: Install Docker Desktop. Task 5.2: Learn the core concepts: Images, Containers, Dockerfile. Task 5.3: Write a `Dockerfile` for your FastAPI application. Task 5.4: Build a Docker image from your Dockerfile and run it as a container on your local machine.","Containerization",Docker,"Successfully run your entire FastAPI application inside a Docker container.",Not Started
"Phase 2: Containerization & Deployment","6","2025-08-18","2025-08-24","Managing Services with Docker Compose","Task 6.1: Learn why Docker Compose is useful for multi-service applications. Task 6.2: Create a `docker-compose.yml` file. Task 6.3: While Supabase is a cloud service, practice by adding another service like Adminer (a DB admin tool) to your compose file to learn service linking. Task 6.4: Learn the commands: `docker-compose up`, `down`, `build`.","Orchestration",Docker Compose,"Manage your application using a single `docker-compose up` command.",Not Started
"Phase 3: Building the Frontend","7","2025-08-25","2025-08-31","Intro to TypeScript","Task 7.1: Set up a Node.js environment. Task 7.2: Learn the basics of TypeScript: strong typing (string, number, boolean), interfaces, and types. Task 7.3: Understand the difference between TypeScript and JavaScript. Task 7.4: Set up a basic TypeScript project and compile it to JavaScript.","Modern JavaScript",Node.js, TypeScript,"Write a simple program in TypeScript and understand the compilation process.",Not Started
"Phase 3: Building the Frontend","8","2025-09-01","2025-09-07","Intro to Refine & ShadCN","Task 8.1: Read the Refine documentation to understand its core philosophy (Headless UI framework). Task 8.2: Use the CLI to create a new Refine project (with Vite and React). Task 8.3: Explore the project structure. Identify components, pages, and layouts. Task 8.4: Add ShadCN to your project and experiment with adding a few UI components (Button, Card) to a page.","Frontend Frameworks",Refine, Vite, React, ShadCN/ui,"Create a basic Refine application with a homepage that uses ShadCN components.",Not Started
"Phase 3: Building the Frontend","9","2025-09-08","2025-09-14","Connecting Frontend to Backend","Task 9.1: Learn how to fetch data from an API in a React/Refine app (using `useList`). Task 9.2: Configure your Refine app to communicate with your FastAPI backend API. Handle CORS issues. Task 9.3: Create a page that lists all the To-Do items by fetching them from your API. Task 9.4: Display the items using ShadCN components like `Card` and `Table`.","API Integration",Refine Data Hooks,"Display the To-Do items from your Supabase DB on your web application's UI.",Not Started
"Phase 3: Building the Frontend","10","2025-09-15","2025-09-21","Creating & Updating Data from the UI","Task 10.1: Use Refine's `useForm` hook to create a form for adding new To-Do items. Task 10.2: Make the form submit data to your FastAPI POST endpoint. Task 10.3: Add a 'delete' button to each item that calls your DELETE endpoint. Task 10.4: Implement the 'update' functionality (e.g., a checkbox to mark a task as complete).","State Management",Refine Form Hooks,"Have a fully functional CRUD application, managing all data from the frontend UI.",Not Started
"Phase 3: Building the Frontend","11","2025-09-22","2025-09-28","User Authentication","Task 11.1: Use Supabase Auth to implement login/signup functionality in your FastAPI backend. Secure your endpoints. Task 11.2: Use Refine's authentication provider to create login and registration pages on the frontend. Task 11.3: Make it so only logged-in users can see and manage their own To-Do items (Row Level Security in Supabase).","Security & Auth",Supabase Auth,"Users can sign up, log in, and only see the data they created.",Not Started
"Phase 3: Building the Frontend","12","2025-09-29","2025-10-05","Project Polish and Refinement","Task 12.1: Clean up your code on both frontend and backend. Add comments. Task 12.2: Improve the UI/UX. Make it look professional using ShadCN's layout utilities. Task 12.3: Ensure your GitHub repository is clean and has a good README file explaining the project so far. Task 12.4: Write down what you've learned and what was challenging.","Code Quality & UX","GitHub, Prettier,"A polished, fully functional, full-stack To-Do application ready for new features.",Not Started
"Phase 4: Integrating Intelligence","13","2025-10-06","2025-10-12","Revisiting LLMs & Prompt Engineering","Task 13.1: Re-read the fundamentals of LLMs and Prompt Engineering (from the original 8-week plan). Task 13.2: Choose an LLM provider with an API (e.g., OpenAI, Google Gemini, Anthropic). Task 13.3: Create a new endpoint in your FastAPI backend (e.g., `/api/suggest-task`). This endpoint will take a topic and use the LLM to generate a suggested task. Task 13.4: Test this endpoint thoroughly using API testing tools like Postman or VS Code's Thunder Client.","AI Integration",LLM APIs (Gemini/OpenAI),"Your backend can now call an external LLM to generate intelligent suggestions.",Not Started
"Phase 4: Integrating Intelligence","14","2025-10-13","2025-10-19","Connecting AI to the Frontend","Task 14.1: Add a new ""Suggest a Task"" button to your frontend UI. Task 14.2: When clicked, this button should call your new `/api/suggest-task` backend endpoint. Task 14.3: Display the AI-generated suggestion to the user. Task 14.4: Add a button for the user to accept the suggestion and add it to their To-Do list.","Full-Stack AI",React State,"A user can click a button on the UI to get an AI-generated task suggestion and add it to their list.",Not Started
"Phase 4: Integrating Intelligence","15","2025-10-20","2025-10-26","Intro to Fine-Tuning for a Purpose","Task 15.1: Re-read the theory of Fine-Tuning (PEFT, LoRA). Task 15.2: Create a small, specialized dataset. For example, a JSONL file with 20 examples of prompts for generating tasks in a specific style (e.g., `{'prompt': 'Create a fitness task', 'completion': 'Go for a 30-minute run'}`). Task 15.3: Follow a tutorial to fine-tune a small, open-source LLM on this dataset using Google Colab.","Applied ML",Hugging Face, Colab,"A fine-tuned model that is slightly better at your specific task than the general-purpose base model.",Not Started
"Phase 4: Integrating Intelligence","16-24","2025-10-27","2025-12-21","Advanced Features & Self-Study","This final, extended phase is for deepening your knowledge and expanding the project. Choose from these tasks: **1. Deploy Your Model:** Learn to deploy your fine-tuned model and call it from your API. **2. Advanced AI Feature:** Implement a more complex feature, like a ""Weekly Plan Generator"" that creates 7 tasks based on a user's goals. **3. RAG:** Implement a RAG system where the AI can answer questions based on a user's uploaded documents. **4. Deeper into Cloud:** Deploy your entire Dockerized application to a cloud provider like DigitalOcean or AWS Lightsail.","Specialization","Your Choice (Cloud, RAG, Advanced AI)","A complete, deployed, AI-powered full-stack application and a clear direction for your future career.",Not Started










Week,Start Date,End Date,Focus / Theme,Task Description,Primary Skill,Time Allocation (Est.),Tools / Resources,Status
"Week 1","2025-07-14","2025-07-20","Foundations: Mastering the Conversation","Task 1.1 (Weekdays): Read/watch tutorials on what LLMs, Transformers, and Tokens are. Understand the core concepts. Task 1.2 (Weekdays): Learn the key differences between Zero-shot, One-shot, and Few-shot prompting. Task 1.3 (Weekend): Use a web UI (Gemini, ChatGPT) to perform 10 different tasks. For each, document your initial prompt and 2 improved versions, noting why the changes worked. Task 1.4 (Weekend): Start a 'Project Ideas' document and list 15+ commands you want your future AI assistant to handle.","Prompt Engineering",~14 Hours,"Gemini/ChatGPT Web UI, Notion/Google Docs","Not Started"
"Week 2","2025-07-21","2025-07-27","The Engineer's Toolkit: Python & Hugging Face","Task 2.1 (Weekdays): Set up your Python environment with `venv` and install the `transformers` and `torch` libraries. Task 2.2 (Weekdays): Write a Python script to use the Hugging Face `pipeline()` for text-generation and summarization. Task 2.3 (Weekend): Experiment with at least 3 different models from the Hub within your pipeline script. Compare their outputs. Task 2.4 (Weekend): Write a script that takes a hardcoded text command and uses a pipeline to execute a relevant task (e.g., sentiment analysis on a sentence).","Python for AI",~14 Hours,"VS Code, Python 3.10+, Hugging Face Hub","Not Started"
"Week 3","2025-07-28","2025-08-03","How LLMs Learn: Datasets & Fine-Tuning Theory","Task 3.1 (Weekdays): Study the concepts of Pre-training vs. Fine-tuning. Understand what an instruction dataset is. Task 3.2 (Weekdays): Browse instruction datasets on the Hugging Face Hub (e.g., databricks-dolly-15k, open-platypus). Task 3.3 (Weekend): Write a Python script using the `datasets` library to load, inspect, and print 10-15 examples from a chosen instruction dataset. Task 3.4 (Weekend): Take 10 commands from your 'Project Ideas' doc and manually format them into a JSON file following the instruction dataset structure (e.g., `{'instruction': '...', 'input': '...', 'output': '...'}`).","Data Handling",~14 Hours,"VS Code, Hugging Face Datasets Library","Not Started"
"Week 4","2025-08-04","2025-08-10","Hands-On: Your First Fine-Tune","Task 4.1 (Weekdays): Read about Parameter-Efficient Fine-Tuning (PEFT), specifically the concepts of LoRA and QLoRA. Task 4.2 (Weekdays): Set up a Google Colab account and get familiar with its interface for using free GPUs. Task 4.3 (Weekend): Find and complete a full tutorial notebook for fine-tuning a small model (e.g., OPT-350m or GPT-2) using QLoRA and the Hugging Face `Trainer` API. Task 4.4 (Weekend): After fine-tuning, test your model with 5 new prompts and compare its performance to the base model.","Fine-Tuning",~14 Hours,"Google Colab, Hugging Face `Trainer` & `peft`","Not Started"
"Week 5","2025-08-11","2025-08-17","Assistant's Brain: Advanced Prompting & Logic","Task 5.1 (Weekdays): Learn the theory behind advanced prompting techniques like Chain-of-Thought (CoT) and ReAct (Reason + Act). Task 5.2 (Weekdays): Design the logic for your assistant. How does it get a command and decide what to do? Task 5.3 (Weekend): Write a Python script that takes a complex command (e.g., ""Find the top 3 Python libraries for web scraping and save them to a file."") and uses an LLM (via API) with a ReAct prompt to generate a step-by-step plan in JSON format.","System Design",~14 Hours,"VS Code, OpenAI/Gemini API","Not Started"
"Week 6","2025-08-18","2025-08-24","Assistant's Senses: Voice & OS Control","Task 6.1 (Weekdays): Write a standalone Python script using the `SpeechRecognition` library that listens to your microphone and transcribes your speech to text in the console. Task 6.2 (Weekdays): Write a separate script with functions to control your OS using the `subprocess` (for terminal commands) and `pyautogui` (for GUI automation) libraries. Task 6.3 (Weekend): Create 3-4 simple OS control functions (e.g., `open_browser()`, `type_text('hello world')`, `press_enter()`). Test them thoroughly.","Automation & I/O",~14 Hours,"VS Code, `SpeechRecognition`, `pyautogui`, `subprocess` libraries","Not Started"
"Week 7","2025-08-25","2025-08-31","Capstone Project v0.1: Integration","Task 7.1 (Weekdays): Plan the architecture of your final application. How will the 'Ears', 'Brain', and 'Hands' scripts communicate? Task 7.2 (Weekend): Create the main `assistant.py` script. Implement a main loop that: 1. Listens for your voice command. 2. Sends the command to the 'Brain' to get a simple action. 3. Calls the correct OS control function from your 'Hands' script. Task 7.3 (Weekend): Successfully integrate and test 2-3 simple commands end-to-end (e.g., ""Hey assistant, open notepad."").","Integration",~14 Hours,"All previous tools and scripts","Not Started"




"Week 8","2025-09-01","2025-09-07","Capstone Project v0.2: Refinement & Expansion","Task 8.1 (Weekdays): Implement more robust error handling. What happens if a voice command is not understood or an action fails? Task 8.2 (Weekdays): Start a GitHub repository for your project, commit your code, and write a simple README.md file explaining your project. Task 8.3 (Weekend): Add 3-5 more complex commands to your assistant. This might involve chaining multiple actions together. Task 8.4 (Weekend): Review your entire journey, identify areas you want to learn more about, and plan your 'next steps' after this initial 8-week sprint.","Project Development",~14 Hours,"GitHub, All previous tools","Not Started"
